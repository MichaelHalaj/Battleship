(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([e.id,"body, html {\n    font-family: 'PT Sans', sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 96px;\n    background-color: #083344;\n    font-weight: 700;\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color: #334155;\n    border-radius: 5px;\n}\n.content {\n    padding: 100px;\n    display: flex;\n    gap: 100px;\n}\n.title {\n    color: #a3e635;\n    padding: 7px;\n}\n.grid {\n    background-color: #a3e635;\n    padding: 2px;\n}\n.grid-item {\n    width: 30px;\n    height: 30px;\n    background-color: #0a0a0a;\n    transition: background-color 200ms ease-in-out;\n}\n.grid-item:hover {\n    cursor: pointer;\n}\n.ship-selected {\n    background-color: #a3e635   ;\n}\nbutton {\n    border: 2px solid #a3e635;\n    outline: none;\n    font-family: 'PT Sans', sans-serif;\n    background-color: rgba(0, 0, 0, 0);\n    color: #a3e635;\n    border-radius: 2px;\n    font-size: 30px;\n    transition: all 200ms ease-in-out;\n}\nbutton:hover {\n    color:#334155;\n    background-color: #a3e635;\n    cursor: pointer;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,kCAAkC;IAClC,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,yBAAyB;IACzB,gBAAgB;IAChB,YAAY;IACZ,WAAW;IACX,SAAS;IACT,UAAU;AACd;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,yBAAyB;IACzB,kBAAkB;AACtB;AACA;IACI,cAAc;IACd,aAAa;IACb,UAAU;AACd;AACA;IACI,cAAc;IACd,YAAY;AAChB;AACA;IACI,yBAAyB;IACzB,YAAY;AAChB;AACA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,8CAA8C;AAClD;AACA;IACI,eAAe;AACnB;AACA;IACI,4BAA4B;AAChC;AACA;IACI,yBAAyB;IACzB,aAAa;IACb,kCAAkC;IAClC,kCAAkC;IAClC,cAAc;IACd,kBAAkB;IAClB,eAAe;IACf,iCAAiC;AACrC;AACA;IACI,aAAa;IACb,yBAAyB;IACzB,eAAe;AACnB",sourcesContent:["body, html {\n    font-family: 'PT Sans', sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 96px;\n    background-color: #083344;\n    font-weight: 700;\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color: #334155;\n    border-radius: 5px;\n}\n.content {\n    padding: 100px;\n    display: flex;\n    gap: 100px;\n}\n.title {\n    color: #a3e635;\n    padding: 7px;\n}\n.grid {\n    background-color: #a3e635;\n    padding: 2px;\n}\n.grid-item {\n    width: 30px;\n    height: 30px;\n    background-color: #0a0a0a;\n    transition: background-color 200ms ease-in-out;\n}\n.grid-item:hover {\n    cursor: pointer;\n}\n.ship-selected {\n    background-color: #a3e635   ;\n}\nbutton {\n    border: 2px solid #a3e635;\n    outline: none;\n    font-family: 'PT Sans', sans-serif;\n    background-color: rgba(0, 0, 0, 0);\n    color: #a3e635;\n    border-radius: 2px;\n    font-size: 30px;\n    transition: all 200ms ease-in-out;\n}\nbutton:hover {\n    color:#334155;\n    background-color: #a3e635;\n    cursor: pointer;\n}\n"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=o[l]||0,u="".concat(l," ").concat(d);o[l]=d+1;var A=t(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var h=i(p,r);r.byIndex=s,n.splice(s,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=t(o[a]);n[s].references--}for(var c=r(e,i),l=0;l<o.length;l++){var d=t(o[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),i=t.n(r),o=t(569),a=t.n(o),s=t(565),c=t.n(s),l=t(216),d=t.n(l),u=t(589),A=t.n(u),p=t(426),h={};h.styleTagTransform=A(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=d(),n()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;class g{length;hitCount;sunk;static shipTypes={carrier:5,battleship:4,destroyer:3,submarine:3,"patrol boat":2};constructor(e,n=0,t=!1){this.length=g.shipTypes[e],this.hitCount=n,this.sunk=t}hit(){this.isSunk()?this.sunk=!0:this.hitCount+=1}isSunk(){return this.hitCount>=this.length}}const f=g;class m{grid;static shipIndexes={carrier:1,battleship:2,destroyer:3,submarine:4,"patrol boat":5};dimension;static standardSize=10;constructor(e=m.standardSize){this.grid=[...Array(e)].map((()=>Array(e).fill(0))),this.shipList=Array(5).fill(void 0),this.dimension=e}shipOverlaps(e,n,t){if("horizontal"===t){for(let t=0;t<e.length;t+=1)if(0!==this.grid[n[0]][n[1]+t])return!0}else for(let t=0;t<e.length;t+=1)if(0!==this.grid[n[0]+t][n[1]])return!0;return!1}shipOutOfBounds(e,n,t){if("horizontal"===t){if(n[1]+e.length-1>=this.grid[0].length)return!0}else if(n[0]+e.length-1>=this.grid.length)return!0;return!1}shipPlacementIsValid(e,n,t){return!this.shipOutOfBounds(e,n,t)&&!this.shipOverlaps(e,n,t)}placeShip(e,n,t){const r=new f(e);if(!this.shipPlacementIsValid(r,n,t))return!1;if("horizontal"===t)for(let t=0;t<r.length;t+=1)this.grid[n[0]][n[1]+t]=m.shipIndexes[e];else for(let t=0;t<r.length;t+=1)this.grid[n[0]+t][n[1]]=m.shipIndexes[e];return this.shipList[m.shipIndexes[e]-1]=r,!0}receiveAttack(e){const n=this.grid[e[0]][e[1]];n>=1?this.shipList[n-1].hit():this.grid[e[0]][e[1]]=-1}allShipsSunk(){for(let e=0;e<this.shipList.length;e+=1)if(void 0!==this.shipList[e]&&!this.shipList[e].isSunk())return!1;return!0}}const v=m,b=class{name;gameboard;activeTurn;possibleMoves;availableRows;constructor(e="The Computer"){this.name=e,this.gameboard=new v,this.activeTurn=!1,this.possibleMoves=[...Array(this.gameboard.grid.length)].map((()=>[...Array(this.gameboard.grid.length).keys()])),this.availableRows=[...Array(this.gameboard.grid.length).keys()]}get isActive(){return this.activeTurn}set isActive(e){this.activeTurn=e}generateRandomIndex(e){return Math.floor(Math.random()*e)}makeMove(e,n){if("The Computer"===this.name){const n=this.generateRandomIndex(this.availableRows.length),t=this.generateRandomIndex(this.possibleMoves[this.availableRows[n]].length);e.gameboard.receiveAttack([this.availableRows[n],t]),this.possibleMoves[this.availableRows[n]].splice(t,1),0===this.possibleMoves[this.availableRows[n]].length&&this.availableRows.splice(n,1)}else e.gameboard.receiveAttack(n)}},C=v.standardSize,y=document.querySelectorAll(".grid"),I=(document.getElementById("grid1"),document.getElementById("grid2"),document.querySelector(".start"));let B=1;y.forEach((e=>{e.setAttribute("style",`display: grid; grid-template-columns: repeat(${C}, 1fr); grid-template-rows: repeat(${C}, 1fr); grid-gap: 2px;`);for(let n=0;n<C;n+=1)for(let t=0;t<C;t+=1){const r=document.createElement("div");r.classList.add("grid-item"),r.setAttribute("id",`grid-${B}-item-${n}-${t}`),e.appendChild(r)}B+=1}));const x=document.querySelectorAll(".grid-item");function k(e,n,t){return`grid-${e}-item-${n}-${t}`}x.forEach((e=>{e.addEventListener("mouseover",(()=>{const n=e.id.split("-");for(let e=0;e<5;e+=1){const t=`${n[0]}-${n[1]}-${n[2]}-${+n[3]+e}-${n[4]}`;document.getElementById(t).classList.add("ship-selected")}})),e.addEventListener("mouseleave",(()=>{const n=e.id.split("-");for(let e=0;e<5;e+=1){const t=`${n[0]}-${n[1]}-${n[2]}-${+n[3]+e}-${n[4]}`;document.getElementById(t).classList.remove("ship-selected")}}))})),console.log(),I.addEventListener("click",(()=>{!function(){const e=new b("Player");new b,e.gameboard.placeShip("carrier",[0,0],"horizontal"),e.gameboard.placeShip("battleship",[4,3],"vertical"),e.gameboard.placeShip("destroyer",[6,9],"vertical"),e.gameboard.placeShip("submarine",[9,2],"horizontal"),e.gameboard.placeShip("patrol boat",[2,8],"vertical"),console.log(e.gameboard),function(e,n){const t=Array.from(x),r=n.gameboard.grid.length;for(let e=0;e<r;e+=1)for(let i=0;i<r;i+=1)n.gameboard.grid[e][i]>=1&&t.find((n=>n.id===k(1,e,i))).classList.add("ship-selected")}(0,e)}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,